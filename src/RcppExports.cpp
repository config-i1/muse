// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ctllSim
arma::mat ctllSim(arma::mat states, arma::mat const& noiseEta, arma::mat const& noiseEpsilon, bool const& logValue);
RcppExport SEXP _muse_ctllSim(SEXP statesSEXP, SEXP noiseEtaSEXP, SEXP noiseEpsilonSEXP, SEXP logValueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type states(statesSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type noiseEta(noiseEtaSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type noiseEpsilon(noiseEpsilonSEXP);
    Rcpp::traits::input_parameter< bool const& >::type logValue(logValueSEXP);
    rcpp_result_gen = Rcpp::wrap(ctllSim(states, noiseEta, noiseEpsilon, logValue));
    return rcpp_result_gen;
END_RCPP
}
// MSOEc
SEXP MSOEc(SEXP commands, SEXP ys, SEXP us, SEXP models, SEXP periodss, SEXP rhoss, SEXP hs, SEXP tTests, SEXP criterions, SEXP ps, SEXP rubbish2s, SEXP rubbishs, SEXP verboses, SEXP stepwises, SEXP estimOks, SEXP p0s, SEXP vs, SEXP yFitVs, SEXP nonStationaryTermss, SEXP rubbish3s, SEXP harmonicss, SEXP criterias, SEXP cycleLimitss, SEXP betass, SEXP typeOutlierss, SEXP TVPs, SEXP trendOptionss, SEXP seasonalOptionss, SEXP irregularOptionss);
RcppExport SEXP _muse_MSOEc(SEXP commandsSEXP, SEXP ysSEXP, SEXP usSEXP, SEXP modelsSEXP, SEXP periodssSEXP, SEXP rhossSEXP, SEXP hsSEXP, SEXP tTestsSEXP, SEXP criterionsSEXP, SEXP psSEXP, SEXP rubbish2sSEXP, SEXP rubbishsSEXP, SEXP verbosesSEXP, SEXP stepwisesSEXP, SEXP estimOksSEXP, SEXP p0sSEXP, SEXP vsSEXP, SEXP yFitVsSEXP, SEXP nonStationaryTermssSEXP, SEXP rubbish3sSEXP, SEXP harmonicssSEXP, SEXP criteriasSEXP, SEXP cycleLimitssSEXP, SEXP betassSEXP, SEXP typeOutlierssSEXP, SEXP TVPsSEXP, SEXP trendOptionssSEXP, SEXP seasonalOptionssSEXP, SEXP irregularOptionssSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type commands(commandsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< SEXP >::type us(usSEXP);
    Rcpp::traits::input_parameter< SEXP >::type models(modelsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type periodss(periodssSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rhoss(rhossSEXP);
    Rcpp::traits::input_parameter< SEXP >::type hs(hsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tTests(tTestsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type criterions(criterionsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ps(psSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rubbish2s(rubbish2sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rubbishs(rubbishsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type verboses(verbosesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type stepwises(stepwisesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type estimOks(estimOksSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p0s(p0sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type yFitVs(yFitVsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nonStationaryTermss(nonStationaryTermssSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rubbish3s(rubbish3sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type harmonicss(harmonicssSEXP);
    Rcpp::traits::input_parameter< SEXP >::type criterias(criteriasSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cycleLimitss(cycleLimitssSEXP);
    Rcpp::traits::input_parameter< SEXP >::type betass(betassSEXP);
    Rcpp::traits::input_parameter< SEXP >::type typeOutlierss(typeOutlierssSEXP);
    Rcpp::traits::input_parameter< SEXP >::type TVPs(TVPsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type trendOptionss(trendOptionssSEXP);
    Rcpp::traits::input_parameter< SEXP >::type seasonalOptionss(seasonalOptionssSEXP);
    Rcpp::traits::input_parameter< SEXP >::type irregularOptionss(irregularOptionssSEXP);
    rcpp_result_gen = Rcpp::wrap(MSOEc(commands, ys, us, models, periodss, rhoss, hs, tTests, criterions, ps, rubbish2s, rubbishs, verboses, stepwises, estimOks, p0s, vs, yFitVs, nonStationaryTermss, rubbish3s, harmonicss, criterias, cycleLimitss, betass, typeOutlierss, TVPs, trendOptionss, seasonalOptionss, irregularOptionss));
    return rcpp_result_gen;
END_RCPP
}
// INTLEVELc
SEXP INTLEVELc(char command, arma::vec y, SEXP us, int h, std::string obsEq, bool verbose, SEXP p0s, bool logTransform);
RcppExport SEXP _muse_INTLEVELc(SEXP commandSEXP, SEXP ySEXP, SEXP usSEXP, SEXP hSEXP, SEXP obsEqSEXP, SEXP verboseSEXP, SEXP p0sSEXP, SEXP logTransformSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< char >::type command(commandSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type us(usSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< std::string >::type obsEq(obsEqSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p0s(p0sSEXP);
    Rcpp::traits::input_parameter< bool >::type logTransform(logTransformSEXP);
    rcpp_result_gen = Rcpp::wrap(INTLEVELc(command, y, us, h, obsEq, verbose, p0s, logTransform));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_muse_ctllSim", (DL_FUNC) &_muse_ctllSim, 4},
    {"_muse_MSOEc", (DL_FUNC) &_muse_MSOEc, 29},
    {"_muse_INTLEVELc", (DL_FUNC) &_muse_INTLEVELc, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_muse(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
